'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _child_process;










function _load_child_process() {return _child_process = require('child_process');}var _fs;
function _load_fs() {return _fs = require('fs');}var _os;
function _load_os() {return _os = require('os');}var _events;
function _load_events() {return _events = _interopRequireDefault(require('events'));}var _project_workspace;
function _load_project_workspace() {return _project_workspace = _interopRequireDefault(require('./project_workspace'));}var _Process;
function _load_Process() {return _Process = require('./Process');}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// This class represents the running process, and
// passes out events when it understands what data is being
// pass sent out of the process
class Runner extends (_events || _load_events()).default {









  constructor(workspace, options) {
    super();
    this._createProcess = options && options.createProcess || (_Process || _load_Process()).createProcess;
    this.workspace = workspace;
    this.outputPath = (0, (_os || _load_os()).tmpdir)() + '/jest_runner.json';
  }

  start() {let watchMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    if (this.debugprocess) {
      return;
    }

    this.watchMode = watchMode;

    // Handle the arg change on v18
    const belowEighteen = this.workspace.localJestMajorVersion < 18;
    const outputArg = belowEighteen ? '--jsonOutputFile' : '--outputFile';

    const args = ['--json', '--useStderr', outputArg, this.outputPath];
    if (this.watchMode) args.push('--watch');

    this.debugprocess = this._createProcess(this.workspace, args);
    this.debugprocess.stdout.on('data', data => {
      // Make jest save to a file, otherwise we get chunked data
      // and it can be hard to put it back together.
      const stringValue = data.
      toString().
      replace(/\n$/, '').
      trim();
      if (stringValue.startsWith('Test results written to')) {
        (0, (_fs || _load_fs()).readFile)(this.outputPath, 'utf8', (err, data) => {
          if (err) {
            const message = `JSON report not found at ${this.outputPath}`;
            this.emit('terminalError', message);
          } else {
            this.emit('executableJSON', JSON.parse(data));
          }
        });
      } else {
        this.emit('executableOutput', stringValue.replace('[2J[H', ''));
      }
    });

    this.debugprocess.stderr.on('data', data => {
      this.emit('executableStdErr', data);
    });

    this.debugprocess.on('exit', () => {
      this.emit('debuggerProcessExit');
    });

    this.debugprocess.on('error', error => {
      this.emit('terminalError', 'Process failed: ' + error.message);
    });

    this.debugprocess.on('close', () => {
      this.emit('debuggerProcessExit');
    });
  }

  runJestWithUpdateForSnapshots(completion) {
    const args = ['--updateSnapshot'];
    const updateProcess = this._createProcess(this.workspace, args);
    updateProcess.on('close', () => {
      completion();
    });
  }

  closeProcess() {
    if (process.platform === 'win32') {
      // Windows doesn't exit the process when it should.
      (0, (_child_process || _load_child_process()).spawn)('taskkill', ['/pid', '' + this.debugprocess.pid, '/T', '/F']);
    } else {
      this.debugprocess.kill();
    }
    delete this.debugprocess;
  }}exports.default = Runner; /**
                               * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                               *
                               * This source code is licensed under the MIT license found in the
                               * LICENSE file in the root directory of this source tree.
                               *
                               * 
                               */