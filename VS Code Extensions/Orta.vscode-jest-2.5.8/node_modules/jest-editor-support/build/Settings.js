'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _child_process;










function _load_child_process() {return _child_process = require('child_process');}var _events;
function _load_events() {return _events = _interopRequireDefault(require('events'));}var _project_workspace;
function _load_project_workspace() {return _project_workspace = _interopRequireDefault(require('./project_workspace'));}var _Process;
function _load_Process() {return _Process = require('./Process');}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// This class represents the the configuration of Jest's process
// we want to start with the defaults then override whatever they output
// the interface below can be used to show what we use, as currently the whole
// settings object will be in memory.

// Ideally anything you care about adding should have a default in
// the constructor see https://facebook.github.io/jest/docs/configuration.html
// for full deets

// For now, this is all we care about inside the config










class Settings extends (_events || _load_events()).default {










  constructor(workspace, options) {
    super();
    this.workspace = workspace;
    this._createProcess = options && options.createProcess || (_Process || _load_Process()).createProcess;

    // Defaults for a Jest project
    this.settings = {
      testMatch: ['**/__tests__/**/*.js?(x)', '**/?(*.)(spec|test).js?(x)'],
      testRegex: '(/__tests__/.*|\\.(test|spec))\\.jsx?$' };


    this.configs = [this.settings];
  }

  getConfigs(completed) {
    this.getConfigProcess = this._createProcess(this.workspace, [
    '--showConfig']);


    this.getConfigProcess.stdout.on('data', data => {
      const settings = JSON.parse(data.toString());
      this.jestVersionMajor = parseInt(settings.version.split('.').shift(), 10);
      this.configs =
      this.jestVersionMajor >= 21 ? settings.configs : [settings.config];
    });

    // They could have an older build of Jest which
    // would error with `--showConfig`
    this.getConfigProcess.on('close', () => {
      completed();
    });
  }

  getConfig(completed) {let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.getConfigs(() => {
      this.settings = this.configs[index];
      completed();
    });
  }}exports.default = Settings; /**
                                 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                 *
                                 * This source code is licensed under the MIT license found in the
                                 * LICENSE file in the root directory of this source tree.
                                 *
                                 * 
                                 */