
'use strict';var _require =

require('child_process');const ChildProcess = _require.ChildProcess;var _require2 =
require('fs');const readFile = _require2.readFile;var _require3 =
require('os');const tmpdir = _require3.tmpdir;var _require4 =
require('events');const EventEmitter = _require4.EventEmitter;
const ProjectWorkspace = require('./ProjectWorkspace');var _require5 =
require('./JestProcess');const jestChildProcessWithArgs = _require5.jestChildProcessWithArgs;

// This class represents the running process, and
// passes out events when it understands what data is being
// pass sent out of the process

module.exports = class JestRunner extends EventEmitter {




  constructor(workspace) {
    super();
    this.workspace = workspace;
    this.jsonFilePath = tmpdir() + '/vscode-jest_runner.json';
  }

  start() {
    const args = [
    '--json',
    '--useStderr',
    '--watch',
    '--jsonOutputFile',
    this.jsonFilePath];


    this.debugprocess = jestChildProcessWithArgs(this.workspace, args);
    this.debugprocess.stdout.on('data', data => {
      // Make jest save to a file, otherwise we get chunked data 
      // and it can be hard to put it back together.
      const stringValue = data.toString().replace(/\n$/, '').trim();
      if (stringValue.startsWith('Test results written to')) {
        readFile(this.jsonFilePath, 'utf8', (err, data) => {
          if (err) {
            const message = `JSON report not found at ${ this.jsonFilePath }`;
            this.emit('terminalError', message);
          } else {
            this.emit('executableJSON', JSON.parse(data));
          }
        });
      } else {
        this.emit('executableOutput', stringValue.replace('[2J[H', ''));
      }
    });

    this.debugprocess.stderr.on('data', data => {
      this.emit('executableStdErr', data);
    });

    this.debugprocess.on('exit', () => {
      this.emit('debuggerProcessExit');
    });

    this.debugprocess.on('error', error => {
      this.emit('terminalError', 'Process failed: ' + error.message);
    });

    this.debugprocess.on('close', () => {
      this.emit('debuggerProcessExit');
    });
  }

  runJestWithUpdateForSnapshots(completion) {
    const args = ['--updateSnapshot'];
    const updateProcess = jestChildProcessWithArgs(this.workspace, args);
    updateProcess.on('close', () => {
      completion();
    });
  }

  closeProcess() {
    this.debugprocess.kill();
  }};