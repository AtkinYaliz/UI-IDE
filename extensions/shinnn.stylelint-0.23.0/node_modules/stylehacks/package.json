{
  "_args": [
    [
      {
        "raw": "stylehacks@https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
        "scope": null,
        "escapedName": "stylehacks",
        "name": "stylehacks",
        "rawSpec": "https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
        "spec": "https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
        "type": "remote"
      },
      "/Users/shinnn/github/vscode-stylelint"
    ]
  ],
  "_from": "stylehacks@>=2.3.0 <3.0.0",
  "_id": "stylehacks@2.3.1",
  "_inCache": true,
  "_location": "/stylehacks",
  "_phantomChildren": {
    "chalk": "1.1.3",
    "lodash": "4.17.4",
    "log-symbols": "1.0.2",
    "postcss": "5.2.14"
  },
  "_requested": {
    "raw": "stylehacks@https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
    "scope": null,
    "escapedName": "stylehacks",
    "name": "stylehacks",
    "rawSpec": "https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
    "spec": "https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/stylelint"
  ],
  "_resolved": "https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
  "_shasum": "de49e8baa2e12b29c35b416b337094839bc97b35",
  "_shrinkwrap": null,
  "_spec": "stylehacks@https://registry.npmjs.org/stylehacks/-/stylehacks-2.3.1.tgz",
  "_where": "/Users/shinnn/github/vscode-stylelint",
  "author": {
    "name": "Ben Briggs",
    "email": "beneb.info@gmail.com",
    "url": "http://beneb.info"
  },
  "ava": {
    "require": "babel-core/register"
  },
  "bin": {
    "stylehacks": "dist/cli.js"
  },
  "bugs": {
    "url": "https://github.com/ben-eb/stylehacks/issues"
  },
  "dependencies": {
    "browserslist": "^1.1.3",
    "chalk": "^1.1.1",
    "log-symbols": "^1.0.2",
    "minimist": "^1.2.0",
    "plur": "^2.1.2",
    "postcss": "^5.0.18",
    "postcss-reporter": "^1.3.3",
    "postcss-selector-parser": "^2.0.0",
    "read-file-stdin": "^0.2.1",
    "text-table": "^0.2.0",
    "write-file-stdout": "0.0.2"
  },
  "description": "Detect/remove browser hacks from CSS files.",
  "devDependencies": {
    "ava": "^0.14.0",
    "babel-cli": "^6.5.1",
    "babel-core": "^6.5.2",
    "babel-plugin-add-module-exports": "^0.2.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-es2015-loose": "^7.0.0",
    "babel-preset-stage-0": "^6.5.0",
    "del-cli": "^0.2.0",
    "eslint": "^2.2.0",
    "eslint-config-cssnano": "^2.0.0"
  },
  "eslintConfig": {
    "extends": "cssnano"
  },
  "files": [
    "LICENSE-MIT",
    "dist",
    "usage.txt"
  ],
  "homepage": "https://github.com/ben-eb/stylehacks",
  "keywords": [
    "browsers",
    "css",
    "hack",
    "hacks",
    "optimise",
    "postcss",
    "postcss-plugin",
    "stylehacks"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "stylehacks",
  "optionalDependencies": {},
  "readme": "# stylehacks [![Build Status](https://travis-ci.org/ben-eb/stylehacks.svg?branch=master)][ci] [![NPM version](https://badge.fury.io/js/stylehacks.svg)][npm] [![Dependency Status](https://gemnasium.com/ben-eb/stylehacks.svg)][deps]\n\n> Detect/remove browser hacks from CSS files.\n\n\n## Install\n\nWith [npm](https://npmjs.org/package/stylehacks) do:\n\n```\nnpm install stylehacks --save\n```\n\n\n## Example\n\nIn its default mode, stylehacks will remove hacks from your CSS file, based on\nthe browsers that you wish to support.\n\n### Input\n\n```css\nh1 {\n    _color: white;\n    color: rgba(255, 255, 255, 0.5);\n}\n```\n\n### Output\n\n```css\nh1 {\n    color: rgba(255, 255, 255, 0.5);\n}\n```\n\n\n## API\n\n### `stylehacks.detect(node)`\n\nType: `function`  \nReturns: `boolean`\n\nThis method will take any PostCSS *node*, run applicable plugins depending on\nits type, then will return a boolean depending on whether it found any of\nthe supported hacks. For example, if the `decl` node found below is passed to\nthe `detect` function, it will return `true`. But if the `rule` node is passed,\nit will return `false` instead.\n\n```css\nh1 { _color: red }\n```\n\n### `stylehacks.process(css, [options]).then(function(result) {})`\n\n#### options\n\n##### browsers\n\nType: `string|array`  \nDefault: [browserslist defaults](https://github.com/ai/browserslist)\n\nSpecify the browsers that you wish to support. The string will be passed\ndirectly to browserslist and parsed, however if an array is passed instead then\nstylehacks will use it instead of parsing the browsers itself.\n\n##### lint\n\nType: `boolean`  \nDefault: `false`\n\nIf lint mode is enabled, stylehacks will not remove hacks from the CSS; instead,\nit will warn that hacks were found. When using stylehacks as a PostCSS plugin,\nyou are expected to handle these messages yourself.\n\n##### silent\n\nType: `boolean`  \nDefault: `false`\n\nUsed in combination with the lint option; disables all logging. When using the\nCLI, the process will exit with 0 or 1 as usual.\n\n##### sourcemap\n\nType: `boolean`  \nDefault: `false`\n\nGenerate a sourcemap with the transformed CSS.\n\n### `postcss([ stylehacks(opts) ])`\n\nstylehacks can also be consumed as a PostCSS plugin. See the\n[documentation](https://github.com/postcss/postcss#usage) for examples for\nyour environment.\n\n### CLI\n\nstylehacks also ships with a CLI app. To see the available options, just run:\n\n```sh\n$ stylehacks --help\n```\n\n\n## Related\n\nstylehacks works well with your existing PostCSS setup:\n\n* [stylelint] - Comprehensive & modern CSS linter, to ensure that your code\n  style rules are respected.\n\n\n## Contributing\n\nPull requests are welcome. If you add functionality, then please add unit tests\nto cover it.\n\n\n## License\n\nMIT Â© [Ben Briggs](http://beneb.info)\n\n\n[ci]:        https://travis-ci.org/ben-eb/stylehacks\n[deps]:      https://gemnasium.com/ben-eb/stylehacks\n[npm]:       http://badge.fury.io/js/stylehacks\n[postcss]:   https://github.com/postcss/postcss\n[stylelint]: https://github.com/stylelint/stylelint\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ben-eb/stylehacks.git"
  },
  "scripts": {
    "prepublish": "del-cli dist && BABEL_ENV=publish babel src --out-dir dist --ignore /__tests__/",
    "pretest": "eslint src",
    "test": "ava src/__tests__"
  },
  "version": "2.3.1"
}
