{
  "_args": [
    [
      {
        "raw": "postcss-less@https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
        "scope": null,
        "escapedName": "postcss-less",
        "name": "postcss-less",
        "rawSpec": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
        "spec": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
        "type": "remote"
      },
      "/Users/shinnn/github/vscode-stylelint"
    ]
  ],
  "_from": "postcss-less@>=0.14.0 <0.15.0",
  "_id": "postcss-less@0.14.0",
  "_inCache": true,
  "_location": "/postcss-less",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-less@https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
    "scope": null,
    "escapedName": "postcss-less",
    "name": "postcss-less",
    "rawSpec": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
    "spec": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/stylelint"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
  "_shasum": "c631b089c6cce422b9a10f3a958d2bedd3819324",
  "_shrinkwrap": null,
  "_spec": "postcss-less@https://registry.npmjs.org/postcss-less/-/postcss-less-0.14.0.tgz",
  "_where": "/Users/shinnn/github/vscode-stylelint",
  "author": {
    "name": "Denys Kniazevych",
    "email": "webschik@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/webschik/postcss-less/issues"
  },
  "contributors": [
    {
      "name": "Andrew Powell",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "Pat Sissons",
      "email": "patricksissons@gmail.com"
    }
  ],
  "dependencies": {
    "postcss": "^5.0.21"
  },
  "description": "LESS parser for PostCSS",
  "devDependencies": {
    "babel-core": "^6.7.2",
    "babel-eslint": "^6.0.0",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-preset-es2015": "^6.6.0",
    "babel-register": "^6.7.2",
    "chai": "^3.5.0",
    "eslint-config-strict": "^8.5.0",
    "eslint-plugin-filenames": "^0.2.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-eslint": "^2.0.0",
    "gulp-json-editor": "2.2.1",
    "gulp-mocha": "^2.2.0",
    "gulp-rename": "^1.2.2",
    "gulp-rimraf": "^0.2.0",
    "gulp-uglify": "^1.5.3",
    "gulp-util": "^3.0.7",
    "less": "^2.6.1",
    "mocha": "^2.4.5",
    "postcss-parser-tests": "^5.0.6",
    "run-sequence": "^1.1.5",
    "through": "^2.3.8"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/webschik/postcss-less#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-syntax",
    "parser",
    "less"
  ],
  "license": "MIT",
  "main": "dist/less-syntax.js",
  "name": "postcss-less",
  "optionalDependencies": {},
  "readme": "# PostCSS LESS Syntax\n\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS-SCSS]: https://github.com/postcss/postcss-scss\n[LESS]: http://lesless.org\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n[Stylelint]: http://stylelint.io/\n\n> This project is not stable and is in development. If you'd like to contribute, please submit a Pull Request.\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher's stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[![Build Status](https://img.shields.io/travis/webschik/postcss-less.svg?branch=develop)](https://travis-ci.org/webschik/postcss-less)\n[![npm Downloads](https://img.shields.io/npm/dt/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n[![npm Version](https://img.shields.io/npm/v/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n[![npm License](https://img.shields.io/npm/l/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n[![js-strict-standard-style](https://img.shields.io/badge/code%20style-strict-117D6B.svg)](https://github.com/keithamus/eslint-config-strict)\n\nA [LESS] parser for [PostCSS].\n\n**This module does not compile LESS.** It simply parses mixins and variables so that PostCSS plugins can then transform LESS source code alongside CSS.\n\n## Use Cases\n\n* lint your LESS code with 3rd-part plugins.\n* apply PostCSS transformations (such as [Autoprefixer](https://github.com/postcss/autoprefixer)) directly to the LESS source code\n\n## Usage\n\n### LESS Transformations\n\nThe main use case of this plugin is to apply PostCSS transformations directly\nto LESS source code. For example, if you ship a theme written in LESS and need\n[Autoprefixer] to add the appropriate vendor prefixes to it.\n\n```js\nconst syntax = require('postcss-less');\npostcss(plugins).process(lessText, { syntax: syntax }).then(function (result) {\n    result.content // LESS with transformations\n});\n```\n\n### Comments\n\n#### Inline comments\n\nThis module also enables parsing of single-line comments in CSS source code.\n\n````less\n:root {\n    // Main theme color\n    --color: red;\n}\n````\n\nNote that you don't need a special stringifier to handle the output; the default\none will automatically convert single line comments into block comments. \nIf you need to get inline comments, use [custom PostCSSLess stringifier](#stringifier)\n\n### Rule node\n[PostCSS Rule Node](https://github.com/postcss/postcss/blob/master/docs/api.md#rule-node)\n\n#### rule.ruleWithoutBody\nIt shows that Rule node has body or not.\n\n````js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n        .mixin-name(@param1, @param2);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].ruleWithoutBody // => true for &:extend\nroot.first.nodes[1].ruleWithoutBody // => true for calling of mixin\n````\n#### rule.nodes\n\nArray of children nodes. \n**Note** that rules without body don't have this property.\n\n````js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n        .mixin-name(@param1, @param2);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].nodes // => undefined for &:extend\nroot.first.nodes[1].nodes // => undefined for mixin calling\n````\n\n#### rule.extendRule\nIt shows that Rule node is a nested [extend](http://lesscss.org/features/#extend-feature-extend-inside-ruleset) rule.\n\n````js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].extendRule // => true\n````\n\n### Comment Node\n\n[PostCSS Comment Node](https://github.com/postcss/postcss/blob/master/docs/api.md#comment-node)\n\n#### comment.inline\nIt's inline comment or not.\n````js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('// Hello world');\n\nroot.first.inline // => true\n````\n\n#### comment.block\nIt's block comment or not.\n````js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('/* Hello world */');\n\nroot.first.block // => true\n````\n\n#### comment.raws.begin\nPrecending characters of comment node: `//` or `/*`.\n\n#### comment.raws.content\nRaw content of the comment.\n````js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('// Hello world');\n\nroot.first.raws.content // => '// Hello world'\n````\n\n### Stringifier\n\nIf you need to have LESS code without PostCSS transformation, you have to specify a custom stringifier:\n\n````js\nimport postcss from 'postcss';\nimport postcssLess from 'postcss-less';\nimport stringify from 'postcss-less/less-stringify';\n\nconst lessCode = `\n    // Non-css comment\n    \n    .container {\n        .mixin-1();\n        .mixin-2;\n        .mixin-3 (@width: 100px) {\n            width: @width;\n        }\n    }\n    \n    .rotation(@deg:5deg){\n      .transform(rotate(@deg));\n    }\n`;\n\npostcss().process(less, {\n    syntax: postcssLess,\n    stringifier: stringify\n}).then((result) => {\n    console.log(result.content); // this will be value of `lessCode` without changing of comment nodes and mixins\n});         \n````\n\n## Contribution\nPlease, check our guidelines: [CONTRIBUTING.md](./CONTRIBUTING.md)\n\n## Attribution\n\nThis module is based on the work of [postcss-scss](https://github.com/postcss/postcss-scss) library and includes the `LESS` parser efforts of [github:gilt/postcss-less](https://github.com/gilt/postcss-less)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webschik/postcss-less.git"
  },
  "scripts": {
    "prepublish": "gulp dist",
    "test": "gulp test:all"
  },
  "version": "0.14.0"
}
